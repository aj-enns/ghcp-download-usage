name: Deploy Runbook Infra

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - .github/workflows/deploy-infra.yml
      - infra/**

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Extract Subscription ID
        id: get-sub
        run: |
          SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)
          echo "SUBSCRIPTION_ID=$SUBSCRIPTION_ID"        # Prints the value
          echo "SUBSCRIPTION_ID=$SUBSCRIPTION_ID" >> $GITHUB_ENV  # Exports for next steps

      - name: Use Subscription ID
        run: echo "The subscription ID is $SUBSCRIPTION_ID"

      - name: Deploy Bicep template
        env:
          AZURE_AUTOMATION_ACCOUNT: ${{ secrets.AZURE_AUTOMATION_ACCOUNT }}
          AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
          AZURE_CONTAINER_NAME: ${{ vars.AZURE_CONTAINER_NAME }}
          AZURE_STORAGE_ACCOUNT_NAME: ${{ vars.AZURE_STORAGE_ACCOUNT_NAME }}
        run: |
          az account set --subscription $SUBSCRIPTION_ID
          az deployment group create \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --template-file infra/deploy-resources.bicep \
            --parameters \
                location="$AZURE_LOCATION" \
                automationAccountName="$AZURE_AUTOMATION_ACCOUNT" \
                resourceGroupName="$AZURE_RESOURCE_GROUP" \
                containerName="$AZURE_CONTAINER_NAME" \
                storageAccountName="$AZURE_STORAGE_ACCOUNT_NAME"

      - name: Get Storage Account Key
        env:
          AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
          AZURE_STORAGE_ACCOUNT_NAME: ${{ vars.AZURE_STORAGE_ACCOUNT_NAME }}
        run: |
          ACCOUNT_KEY=$(az storage account keys list --account-name "$AZURE_STORAGE_ACCOUNT_NAME" --resource-group "$AZURE_RESOURCE_GROUP" --query '[0].value' -o tsv)
          echo "AZURE_STORAGE_ACCOUNT_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV

      - name: Create Automation Account Variables
        env:
          AZURE_AUTOMATION_ACCOUNT: ${{ secrets.AZURE_AUTOMATION_ACCOUNT }}
          AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
          GITHUB_PAT: ${{ secrets.REPO_PAT }}
          AZURE_STORAGE_ACCOUNT_NAME: ${{ vars.AZURE_STORAGE_ACCOUNT_NAME }}
          AZURE_CONTAINER_NAME: ${{ vars.AZURE_CONTAINER_NAME }}
          STORAGE_ACCOUNT_KEY: $AZURE_STORAGE_ACCOUNT_KEY
        run: |
          az extension add --name automation
          pwsh -Command "Set-AzAutomationVariable -ResourceGroupName '$env:AZURE_RESOURCE_GROUP' -AutomationAccountName '$env:AZURE_AUTOMATION_ACCOUNT' -Name 'GitHubToken' -Value '$env:GITHUB_PAT' -Encrypted $true"
          pwsh -Command "Set-AzAutomationVariable -ResourceGroupName '$env:AZURE_RESOURCE_GROUP' -AutomationAccountName '$env:AZURE_AUTOMATION_ACCOUNT' -Name 'StorageAccountName' -Value '$env:AZURE_STORAGE_ACCOUNT_NAME'"
          pwsh -Command "Set-AzAutomationVariable -ResourceGroupName '$env:AZURE_RESOURCE_GROUP' -AutomationAccountName '$env:AZURE_AUTOMATION_ACCOUNT' -Name 'StorageAccountKey' -Value '$env:STORAGE_ACCOUNT_KEY' -Encrypted $true"
          pwsh -Command "Set-AzAutomationVariable -ResourceGroupName '$env:AZURE_RESOURCE_GROUP' -AutomationAccountName '$env:AZURE_AUTOMATION_ACCOUNT' -Name 'ContainerName' -Value '$env:AZURE_CONTAINER_NAME'"
